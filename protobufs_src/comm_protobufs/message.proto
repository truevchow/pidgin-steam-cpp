syntax = "proto3";
package steam;
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Send and receive messages from a single Steam user
service MessageService {
    rpc SendChatMessage (MessageRequest) returns (SendMessageResult);
    rpc PollChatMessages (PollRequest) returns (stream ResponseMessage);
    rpc StreamFriendMessages (StreamChatRequest) returns (stream ResponseMessage);
    rpc GetFriendsList (FriendsListRequest) returns (FriendsListResponse);
    rpc GetActiveFriendMessageSessions (ActiveMessageSessionsRequest) returns (ActiveMessageSessionResponse);
    rpc AckFriendMessage (AckFriendMessageRequest) returns (google.protobuf.Empty);
}

message MessageRequest {
    string targetId = 1;
    string message = 2;
    string sessionKey = 3;
}

message SendMessageResult {
    enum SendMessageResultCode {
        SUCCESS = 0;
        INVALID_SESSION_KEY = 1;
        INVALID_TARGET_ID = 2;
        INVALID_MESSAGE = 3;
        UNKNOWN_ERROR = 4;
    }

    bool success = 1;
    SendMessageResultCode reason = 2;
    string reasonStr= 3;
}

message PollRequest {
    string targetId = 1;
    string sessionKey = 2;
    optional google.protobuf.Timestamp startTimestamp = 3;
    optional google.protobuf.Timestamp lastTimestamp = 4;
}

message StreamChatRequest {
    string sessionKey = 1;
}

message ResponseMessage {
    string senderId = 1;
    string message = 2;
    google.protobuf.Timestamp timestamp = 3;
}

message FriendsListRequest {
    string sessionKey = 1;
}

enum PersonaState {  // mirrors SteamUser.EPersonaState
    OFFLINE = 0;
    ONLINE = 1;
    BUSY = 2;
    AWAY = 3;
    SNOOZE = 4;
    LOOKING_TO_TRADE = 5;
    LOOKING_TO_PLAY = 6;
    INVISIBLE = 7;
}

message AvatarUrl {
    string icon = 1;
    string medium = 2;
    string full = 3;
}

message Persona {
    string id = 1;
    string name = 2;
    PersonaState personaState = 3;
    optional int32 gameid = 4;
    optional string gameExtraInfo = 5;
    AvatarUrl avatarUrl = 6;
}

message FriendsListResponse {
    Persona user = 1;
    repeated Persona friends = 2;
}

message ActiveMessageSessionsRequest {
    string sessionKey = 1;
    google.protobuf.Timestamp since = 2;
}

message ActiveMessageSession {
    string targetId = 1;
    google.protobuf.Timestamp lastMessageTimestamp = 2;
    google.protobuf.Timestamp lastViewTimestamp = 3;
    int32 unreadCount = 4;
}

message ActiveMessageSessionResponse {
    repeated ActiveMessageSession sessions = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message AckFriendMessageRequest {
    string sessionKey = 1;
    string targetId = 2;
    google.protobuf.Timestamp lastTimestamp = 3;
}